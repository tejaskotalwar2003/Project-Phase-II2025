{
    "Knapsack": {
    "Conceptual": {
      "Level 1": [
        "What is the main idea behind the 0/1 Knapsack problem?",
        "In simple terms, what does the Knapsack problem try to solve?",
        "What are the two main inputs needed to define a Knapsack problem?",
        "What does 'capacity' represent in the Knapsack problem?",
        "What does 'value' mean in the context of the Knapsack problem?",
        "What is the goal of the Knapsack problem?",
        "What type of algorithmic technique is usually used to solve the Knapsack problem efficiently?",
        "How do the weight and value of an item influence the Knapsack decision?",
        "Why is it not always optimal to pick the item with the highest value first in the 0/1 Knapsack?",
        "Is it possible that no items are included in a Knapsack solution? Why?",
        "What is the Knapsack problem?",
        "Why is it called the '0/1' Knapsack problem?",
        "What is the difference between Knapsack and fractional Knapsack?",
        "What are the inputs required to solve a Knapsack problem?",
        "Can we take half of an item in the Knapsack problem? Why or why not?",
        "What are the base cases in the Knapsack dynamic programming solution?",
        "What does the knapsack capacity represent in the Knapsack problem?",
        "What does the term 'optimal solution' mean in the context of Knapsack?",
        "Can the Knapsack problem be solved using brute force? If yes, what is the drawback?",
        "What is the Knapsack problem and how does it differ from the fractional knapsack problem?",
        "What does '0/1' signify in the Knapsack problem?",
        "What is the time complexity of the brute-force recursive solution to the Knapsack problem?",
        "What type of dynamic programming table is used in the Knapsack problem?",
        "How is a subproblem defined in the context of the Knapsack problem?",
        "What are the typical dimensions of the DP table in a tabulation-based Knapsack solution?",
        "What information is stored in the dp[i][w] cell of the Knapsack table?",
        "Can the Knapsack problem be solved in polynomial time? Why or why not?",
        "Why is the Knapsack problem classified as an NP-complete problem?",
        "What is the base condition used in the recursive approach for the Knapsack problem?",
        "What are the essential parameters required to define the state of the dynamic programming solution in Knapsack?",
        "Explain the inclusion and exclusion principle in the Knapsack solution.",
        "How does the capacity of the knapsack affect the solution of the Knapsack problem?",
        "Why is backtracking not an efficient approach for solving the Knapsack problem?",
        "What is the difference between top-down and bottom-up approaches in solving the Knapsack problem?",
        "What does optimal substructure mean in the context of the Knapsack problem?",
        "What does overlapping subproblems mean in dynamic programming, and how is it used in Knapsack?"
      ],
      "Level 2": [
        "How does the choice of including or excluding an item impact the overall solution in the 0/1 Knapsack problem?",
        "What is the recursive relation used to define the 0/1 Knapsack problem?",
        "How can overlapping subproblems in the Knapsack problem be used to improve efficiency?",
        "Why does greedy strategy fail for 0/1 Knapsack but work for fractional Knapsack?",
        "What is the difference between 0/1 Knapsack and Fractional Knapsack in terms of item selection?",
        "In what scenarios is it more beneficial to leave a high-value item out of the Knapsack solution?",
        "How do dynamic programming and recursion without memoization differ in solving the Knapsack problem?",
        "What is meant by the term 'optimal substructure' in the context of the Knapsack problem?",
        "How does increasing the capacity of the Knapsack affect the solution space?",
        "What role does the value-to-weight ratio play in understanding item priority?",
        "How would removing an item from the available set affect the final decision in the 0/1 Knapsack problem?",
        "What is a decision table in dynamic programming, and how does it help solve the Knapsack problem?",
        "How can we detect whether an item was included in the optimal Knapsack solution using a filled DP table?",
        "Why is Knapsack considered an NP-complete problem, and what does that imply?",
        "What is the difference between bounded and unbounded Knapsack problems conceptually?",
        "How would you explain the purpose of the DP matrix in the 0/1 Knapsack solution?",
        "How can duplicate item values affect decision-making in the 0/1 Knapsack solution?",
        "Why can two different sets of items sometimes give the same total value in the Knapsack problem?",
        "What kind of real-world problems can be modeled as variations of the Knapsack problem?",
        "If all item weights are the same but values differ, how does that impact the conceptual strategy for Knapsack?",
        "How would you construct a recursive solution with memoization for the Knapsack problem, and what challenges arise in doing so?",
        "Explain how the time complexity of the memoized recursive solution for the Knapsack problem is derived.",
        "Why is it not valid to include a fractional value of an item in the Knapsack problem?",
        "How can tabulation be used to solve the Knapsack problem iteratively, and what are the major steps involved?",
        "What are the advantages of using memoization over pure recursion in solving the Knapsack problem?",
        "Compare and contrast the Knapsack and the Fractional Knapsack problem in terms of their algorithmic approach and time complexity.",
        "Explain the decision-making process for including or excluding an item in the context of dynamic programming for Knapsack.",
        "What kind of modifications would be needed in the DP table to retrieve the list of selected items after solving the Knapsack problem?",
        "Describe how space complexity can be optimized from O(n*W) to O(W) in the Knapsack problem, and what is the trade-off?",
        "How does item ordering affect the dynamic programming table construction in the Knapsack problem, if at all?",
        "Why is the Knapsack problem considered NP-complete, and how does dynamic programming help address this complexity?",
        "What role does the weight constraint play in determining the feasibility of including an item in the Knapsack?",
        "Explain how overlapping subproblems manifest in the Knapsack problem with an example.",
        "How can we identify base cases in the recursive formulation of the Knapsack problem?",
        "Describe a situation where solving the Knapsack using greedy strategy would fail to give the optimal solution.",
        "In what scenarios can the Knapsack solution be used in real-life decision-making systems?",
        "Why does the order of items not matter in the solution to the Knapsack problem?",
        "How does using a two-dimensional DP table help in visualizing subproblem solutions in Knapsack?",
        "Why is it essential to compare both 'include' and 'exclude' cases when designing the recurrence for Knapsack?",
        "What are the limitations of solving large Knapsack problems using standard DP on systems with limited memory?",
        "How is dynamic programming used to solve the Knapsack problem?",
        "What is the recurrence relation used in the Knapsack problem?",
        "Why is the Knapsack problem considered NP-complete, and how does dynamic programming make it solvable in pseudo-polynomial time?",
        "What does 'overlapping subproblems' mean in the context of the Knapsack problem?",
        "What is the difference between top-down and bottom-up approaches for solving the Knapsack problem?",
        "How do you initialize the DP table for solving the Knapsack problem using tabulation?",
        "Explain the impact of changing the item order on the final result of the Knapsack solution.",
        "In Knapsack, how does memoization prevent redundant calculations?",
        "Why can't greedy strategies always solve the Knapsack problem correctly?"
      ],
      "Level 3": [
        "How can the Knapsack problem be optimized for space complexity using a 1D array?",
        "What are the differences in performance and memory usage between 1D and 2D DP approaches for Knapsack?",
        "Explain how to reconstruct the optimal item set from the DP table in the Knapsack solution.",
        "What makes the Knapsack problem pseudo-polynomial, and how does this affect its scalability with large input sizes?",
        "Describe an approach to solve the Knapsack problem using bit masking or state compression.",
        "How does the time complexity change when solving Knapsack for a large number of items with small capacity vs small number of items with large capacity?",
        "Can the Knapsack problem be parallelized efficiently? If yes, what are the challenges?",
        "How can the Knapsack algorithm be adapted to handle item dependencies or group constraints?",
        "What are the edge cases that could cause incorrect results in a dynamic programming solution to Knapsack?",
        "Compare the complexity of solving Knapsack using recursion with memoization versus using an iterative bottom-up approach for large datasets.",
        "How would the complexity of the 0/1 Knapsack problem change if items had dependencies (e.g., you can only include item B if item A is included)?",
        "How does memoization reduce the time complexity of solving the 0/1 Knapsack problem compared to the naive recursive approach?",
        "Why does the 0/1 Knapsack problem require a bottom-up DP approach in practice even though a top-down approach with memoization is conceptually simpler?",
        "How does the Knapsack problem demonstrate the principle of optimal substructure, and why is this principle critical to dynamic programming?",
        "How would you explain the limitations of dynamic programming in solving very large instances of the Knapsack problem?",
        "What are the challenges in adapting the Knapsack problem solution to continuous or real-valued weights and capacities?",
        "How do heuristics like greedy or branch-and-bound help in solving large-scale Knapsack problems conceptually?",
        "In what ways does the structure of input data (e.g., correlation between weights and values) affect the nature of the optimal Knapsack solution?",
        "How would you identify if a Knapsack problem instance could be solved greedily instead of using dynamic programming?",
        "What modifications would be needed to solve a multi-dimensional Knapsack problem (e.g., weight and volume constraints)?",
        "How can you use backtracking with pruning to explore the solution space of the 0/1 Knapsack problem more efficiently?",
        "Explain how Pareto-optimality can be applied to multi-objective versions of the Knapsack problem.",
        "What are the theoretical implications of the Knapsack problem being NP-complete, especially for approximate vs. exact solutions?",
        "How does space optimization using 1D arrays in the Knapsack DP approach conceptually work, and what are the trade-offs?",
        "Why can dynamic programming solutions to the Knapsack problem fail to scale well even if time complexity is polynomial in input size?",
        "How would you handle item sets with duplicate values and weights in a conceptual Knapsack strategy?",
        "What insights can be drawn by visualizing the DP table for Knapsack in terms of capacity vs. value trade-offs?",
        "Explain the role of backtracking through the DP table to reconstruct the optimal subset in 0/1 Knapsack.",
        "How can insights from the fractional Knapsack problem help guide intuition for the 0/1 version?",
        "How would you conceptually justify discarding dominated items (lower value and higher weight) before solving a Knapsack instance?",
        "How would you modify the Knapsack dynamic programming approach to handle fractional item values?",
        "What are the implications of solving a large-scale Knapsack problem in a distributed system, and how would you decompose the problem for parallel computation?",
        "How can you extend the Knapsack problem to include non-linear profit functions or weight constraints?",
        "What modifications would be required to handle the case where items have different profits depending on the number of times they are selected in a Knapsack problem?",
        "In cases where the Knapsack is solved using approximate methods or simulations, what guarantees, if any, can you provide about the solution's optimality?",
        "Discuss how the Knapsack problem can be solved using a greedy approach. Under what conditions does this approach yield an optimal solution?",
        "How does the Knapsack problem differ when the knapsack capacity is non-integer or continuous, and what methods can be used to solve it?",
        "How would you handle the situation in which each item in the Knapsack problem has both a weight and a value that is dynamic, i.e., it changes over time?",
        "Explain how the Knapsack problem can be generalized to work with multiple knapsacks, and how does it differ from the single knapsack version?",
        "What would be the impact on the solution if the problem were extended to allow multiple copies of each item (Unbounded Knapsack problem), and how does this change the dynamic programming approach?",
        "How would the time complexity of the dynamic programming solution change if there were constraints on the number of items that can be chosen from certain categories?",
        "Explain how you could apply the Knapsack problem in a resource allocation scenario, where resources have different usage costs and must be allocated to maximize utility.",
        "How can you combine the Knapsack problem with other combinatorial optimization problems (e.g., traveling salesman problem) to solve complex, real-world problems?",
        "If the Knapsack problem were to involve both deterministic and probabilistic constraints (e.g., uncertain weights or values), how would you approach solving this variant?",
        "What are some heuristic methods you could use to approximate the solution to the Knapsack problem when an exact solution is computationally expensive?",
        "How would you adapt the Knapsack problem to work with fractional values for both weights and values? Discuss the implications and how it could be tackled using greedy algorithms.",
        "How can the Knapsack problem be applied in real-time systems where decisions need to be made under strict time constraints and limited computational resources?",
        "In a multi-objective optimization scenario, where you have to optimize for both value and weight, how would you formulate a Knapsack problem with multiple objectives, and what algorithm would you use?",
        "How can you modify the Knapsack problem to handle scenarios with time-dependent weights and values (e.g., items that decay in value or weight over time)? What algorithms or methods would you use?",
        "Discuss how parallel computing could be leveraged to solve the Knapsack problem for large instances. What challenges would arise in such a distributed setting?",
        "Explain how dynamic programming for the Knapsack problem can be optimized using memoization. In what cases would this optimization provide significant benefits?"
      ]
    },
    "Algorithmic": {
      "Level 1": [
        "Given a knapsack with capacity {{capacity}} and one item of weight {{weight}} and value {{value}}, what is the maximum value that can be obtained?",
        "If you have a knapsack of capacity {{capacity}} and two items: item1(weight={{w1}}, value={{v1}}), item2(weight={{w2}}, value={{v2}}), what is the best value you can carry?",
        "Determine whether to include an item with weight {{weight}} and value {{value}} in a knapsack of capacity {{capacity}}.",
       
        "You are given 1 item with weight {{weight}} and value {{value}}. Can it fit into a knapsack of capacity {{capacity}}?",
        "If you are allowed to select only one item, which should you choose to maximize value: (weight={{w1}}, value={{v1}}) or (weight={{w2}}, value={{v2}}) for capacity {{capacity}}?",
        "What is the total value if you put item1(weight={{w1}}, value={{v1}}) into a knapsack with capacity {{capacity}}?",
        "Out of three items (w,v): ({{w1}},{{v1}}), ({{w2}},{{v2}}), and ({{w3}},{{v3}}), which two would you choose for capacity {{capacity}}?",
        "Can a knapsack of capacity {{capacity}} hold both item A(weight={{w1}}) and item B(weight={{w2}})?",
        "Find the maximum value using only the first {{n}} items in a list of items, given a knapsack of capacity {{capacity}}.",
        "How much unused space remains if item(weight={{weight}}) is added to a knapsack of capacity {{capacity}}?",
        "Can both items with weights {{w1}} and {{w2}} be selected if the capacity is {{capacity}}?",
        "Which of the following fits best into the knapsack (capacity={{capacity}}): item A({{w1}},{{v1}}), item B({{w2}},{{v2}})?",
        "Given two items (w,v): ({{w1}},{{v1}}), ({{w2}},{{v2}}) and capacity {{capacity}}, what is the best value achievable if only one can be selected?",
        "How many total items can you fit if each has weight {{item_weight}} and the knapsack capacity is {{capacity}}?",
        "If you have item A(weight={{w1}}, value={{v1}}) and item B(weight={{w2}}, value={{v2}}), which gives higher value per weight ratio?",
        "Choose the best single item from the list: A({{w1}},{{v1}}), B({{w2}},{{v2}}), C({w3},{{v3}}) for a knapsack of capacity {{capacity}}.",
        "What is the total weight of items selected if you choose item A(weight={{w1}}) and item B(weight={{w2}}) within capacity {{capacity}}?",
        "If each item has weight 1 and value 1, how many items can you choose to maximize total value with capacity {{capacity}}?",
        "Can the knapsack of size {{capacity}} be exactly filled using two items with weights {{w1}} and {{w2}}?"
      ],
      "Level 2": [
        "Given a knapsack of capacity {{capacity}} and items: A(weight={{w1}}, value={{v1}}), B(weight={{w2}}, value={{v2}}), and C(weight={{w3}}, value={{v3}}), find the maximum value achievable.",
        "Choose a combination of items that maximizes value without exceeding the knapsack capacity {{capacity}}. Items: (weight, value) - {{items}}.",
        "With a knapsack capacity of {{capacity}}, how many items from the list can be included: {{item_list}}?",
        "Find the optimal selection for a 0/1 Knapsack problem with capacity {{capacity}} using the items {{items}}.",
        "Determine the maximum value possible by selecting items without repetition. Capacity: {{capacity}}, Items: {{items}}",
        "Which items will be included if we want to maximize the value with knapsack size {{capacity}}? Items: {{items}}",
        "Calculate the best value that can be achieved with items of weights {weights} and values {{values}} for knapsack capacity {{capacity}}.",
        "Given the capacity of knapsack as {{capacity}}, find if you can pick at least two items from: {{items}} to fully utilize the knapsack.",
        "Select two items from the list: {{items}} to maximize value in a knapsack of capacity {{capacity}}.",
        "If you have a knapsack of capacity {capacity}, which item combinations from {{items}} will yield a value above {{value_threshold}}?",
        "Determine the maximum value for fractional selection not allowed. Capacity: {{capacity}}, Items: {{items}}",
        "From the following items: {{items}}, determine which combination offers the highest value within a capacity of {{capacity}}.",
        "How many combinations of items are possible within capacity {{capacity}} for item weights {{weights}}?",
        "List the possible values that can be achieved with combinations from items: {{items}}, within a capacity of {{capacity}}.",
        "Estimate the maximum number of items that can be selected from the list {{items}} within a capacity of {{capacity}}.",
        "Determine which of the items from {{items}} are not worth including due to low value-to-weight ratio. Capacity: {{capacity}}.",
        "From the set {{items}}, identify which pair maximizes total value within the knapsack limit {{capacity}}.",
       
        "Can you exactly fill a knapsack of size {{capacity}} with the following item weights: {{weights}}?",
        "Out of all item combinations from {{items}}, which one gives highest value under the limit {{capacity}} while leaving minimum unused space?"
      ],
      "Level 3": [
        "Given a knapsack capacity of {{capacity}}, and items {{items}}, find the maximum value achievable using dynamic programming.",
        
        "Calculate the DP table for solving the knapsack problem with capacity {{capacity}} and weights {{weights}}, values {{values}}.",
        "Given item list {{items}}, compute both maximum value and the items chosen for knapsack size {{capacity}}.",
        "Which subset of items from {{items}} results in the maximum value without exceeding capacity {{capacity}}, and what is the remaining space?",
        "For the knapsack instance with capacity {{capacity}} and items {{items}}, construct and fill the DP matrix step-by-step.",
        "Given capacity {{capacity}}, explain how the solution changes if item {{exclude_item}} is excluded from {{items}}.",
        "Compute the optimal value for two knapsacks of capacity {{cap1}} and {{cap2}}, where the items {{items}} must be divided optimally.",
        "Using space-optimized DP, solve the 0/1 knapsack problem with capacity {{capacity}} and items {{items}}.",
        "If the total weight must not exceed {{capacity}}, but at least {{min_items}} items must be selected from {{items}}, what is the optimal value?",
        "Given items with close weight-value ratios in {{items}}, find which are most beneficial under capacity {{capacity}}.",
        "Use memoization to solve the knapsack problem for capacity {{capacity}} and the item set {{items}}.",
       
        "Find the optimal solution for the given set {{items}} and capacity {{capacity}}, ensuring at least one item weighs more than {{min_weight}}.",
        "Find the optimal subset of {{items}} for a knapsack of capacity {{capacity}} using top-down dynamic programming.",
        "How does the optimal solution differ when the knapsack capacity changes from {{capacity1}} to {{capacity2}}? Items: {{items}}",
        "For capacity {{capacity}}, evaluate and return all optimal item combinations with total weight below {{max_weight}}. Items: {{items}}",
        "Identify all suboptimal selections from {{items}} that do not contribute to the max value under capacity {{capacity}}."
      ]
    },
    "Implementation": {
      "Level 1": [
        "Write a recursive function to solve the Knapsack problem.",
        "Implement the Knapsack problem using dynamic programming with a 2D array.",
        "Create a function that returns the maximum value that can be put in a knapsack of given capacity using Knapsack logic.",
        "Write code to initialize the DP table for the Knapsack problem.",
        "Implement a basic Knapsack solution using recursion without memoization.",
        "Write a Python function that initializes a knapsack value table with all zeros.",
        "Implement a loop to fill the first row of the knapsack DP table assuming zero items.",
        "Implement a loop to fill the first column of the DP table assuming zero capacity.",
        "Modify a given DP table so that it prints the selected items used to achieve the maximum value.",
        "Write a function to solve the 0/1 Knapsack problem using memoization with a dictionary.",
        "Convert a recursive knapsack solution into a top-down memoized version.",
        "Write a Python function to print the maximum value in the last row of a DP table for the knapsack.",
        "Write code to create a list of item weights and values from tuples like (weight, value).",
        "Initialize a 1D array to use for space-optimized knapsack implementation.",
        "Create a function that solves the 0/1 Knapsack problem using a 1D DP array."
      ],
      "Level 2": [
        "Implement the Knapsack problem using recursion with memoization.",
        "Write a bottom-up dynamic programming solution to the Knapsack problem using tabulation.",
        "Modify your Knapsack implementation to return the list of selected items.",
        "Write code to solve the Knapsack problem and print both the maximum value and the selected item indices.",
        "Implement a tabulation-based Knapsack solution that minimizes space usage by only keeping two rows.",
        "Build a reusable function in Python that solves Knapsack using memoization and handles multiple test cases.",
        "Implement the Knapsack using dynamic programming in a programming language of your choice and analyze time complexity.",
        "Write code to solve the Knapsack problem where weights and values are read from user input.",
        "Implement a Knapsack solution that uses a dictionary for memoization instead of a DP table.",
        "Implement a Knapsack algorithm where values and weights are randomly generated within a given range.",
        "Implement the Knapsack problem using recursion with memoization.",
        "Write a bottom-up dynamic programming solution to the Knapsack problem using tabulation.",
        "Modify your Knapsack implementation to return the list of selected items.",
        "Write code to solve the Knapsack problem and print both the maximum value and the selected item indices.",
        "Implement a tabulation-based Knapsack solution that minimizes space usage by only keeping two rows.",
        "Build a reusable function in Python that solves Knapsack using memoization and handles multiple test cases.",
        "Implement the Knapsack using dynamic programming in a programming language of your choice and analyze time complexity.",
        "Write code to solve the Knapsack problem where weights and values are read from user input.",
        "Implement a Knapsack solution that uses a dictionary for memoization instead of a DP table.",
        "Implement a Knapsack algorithm where values and weights are randomly generated within a given range."
      ],
      "Level 3": [
        "Implement a space-optimized version of the Knapsack problem using a 1D array.",
        "Write a program to solve the Knapsack problem and print all possible optimal item combinations that give the same maximum value.",
        "Implement the Knapsack problem using bitmasking for small input sizes and compare its performance with standard DP.",
        "Modify your DP-based Knapsack code to handle multiple knapsacks (multi-knapsack variant).",
        "Solve the Knapsack problem for large inputs (up to 10^5 items) with time and space optimizations.",
        "Build a class-based implementation of Knapsack with item insertion, deletion, and re-evaluation support.",
        "Implement a recursive + memoized Knapsack solution using functools.lru_cache and validate performance.",
        "Write a Python program that reads item weights/values from a file and solves the Knapsack problem efficiently.",
        "Implement a visualization tool for the Knapsack DP table that highlights the decision process.",
        "Solve a modified Knapsack problem where selecting one item makes some others unavailable (conflict constraints)."
      ]
    }
  }
}